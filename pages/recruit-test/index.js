import Head from 'next/head';
import { useState } from 'react';
import axios from 'axios';
import { useEffectOnce } from 'react-use';
import RegistrationForm from '../../components/candidate/RegistrationForm';
import QuizForm from '../../components/candidate/QuizForm';
import styles from '../../styles/candidate/Test.module.css';

export default function Home() {
  const [activeQuizes, setActiveQuizes] = useState();
  const [isSubmitCandidateInfo, setIsSubmitCandidateInfo] = useState(false);
  const [currentCandidateId, setCurrentCandidateId] = useState();

  useEffectOnce(async () => {
    await axios
      .get('https://recruit-system.herokuapp.com/active-quiz-api')
      .then((res) => {
        setActiveQuizes(res.data);
      })
      .catch((e) => {
        console.log(e);
      });
  });

  const onSubmitCandidateInfo = async (data) => {
    await axios
      .post('https://recruit-system.herokuapp.com/candidate-api', {
        firstname: data.firstname,
        lastname: data.lastname,
        email: data.email,
      })
      .then((res) => {
        setCurrentCandidateId(res.data[0].id);
        setIsSubmitCandidateInfo(true);
      })
      .catch((e) => {
        console.log(e);
      });
  };

  const onSubmit = async (data) => {
    let score = 0;
    let answeredIdList = [];
    activeQuizes.map((item) => {
      const answeredNum = data[item.id];
      const optionsIdList = item.options_id_list.split(',');
      const isCorrectList = item.is_correct_list.split(',');

      answeredNum !== null
        ? answeredIdList.push(optionsIdList[answeredNum])
        : answeredIdList.push(null);

      if (isCorrectList[answeredNum] === 'true') {
        score++;
      }
    });

    await axios
      .post('https://recruit-system.herokuapp.com/candidate-answer-api', {
        currentCandidateId,
        answeredIdList,
        score,
      })
      .then((res) => {
        window.location = '/recruit-test/success';
      })
      .catch((e) => {
        console.log(e);
      });
  };

  return (
    <>
      <Head>
        <title>Recruit Test</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
        <link
          rel='stylesheet'
          href='https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css'
          integrity='sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS'
          crossOrigin='anonymous'
        />
        <link
          rel='stylesheet'
          href='https://pro.fontawesome.com/releases/v5.10.0/css/all.css'
          integrity='sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p'
          crossOrigin='anonymous'
        />
      </Head>

      <div
        className={
          !isSubmitCandidateInfo ? styles.showInfoArea : styles.notShowInfoArea
        }
      >
        <RegistrationForm
          onSubmitCandidateInfo={onSubmitCandidateInfo}
          isSubmitCandidateInfo={isSubmitCandidateInfo}
        ></RegistrationForm>
      </div>

      <div
        className={isSubmitCandidateInfo ? styles.showQuiz : styles.notShowQuiz}
      >
        {activeQuizes && (
          <QuizForm onSubmit={onSubmit} activeQuizes={activeQuizes} />
        )}
      </div>
    </>
  );
}
